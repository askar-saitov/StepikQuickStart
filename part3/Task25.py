# Task25.py

n, k = map(int, input().split())
a = [0] + list(map(int, list(input()))) # стенки
d = 1000000007
z = [0] * (n + 1)
z[0] = 1
z[1] = 1 - a[1]
acc = z[0]
for i in range(2, k + 1):
    acc = (acc + z[i - 1]) % d
    if a[i] == 1:
        z[i] = 0
    else:
        z[i] = acc
for i in range(k + 1, n + 1):
    acc = (acc + z[i - 1] - z[i - 1 - k]) % d
    if a[i] == 1:
        z[i] = 0
    else:
        z[i] = acc

print(0 if z[n] < 0 else z[n])
'''
КузнечиК
Перед клетчатой полоской длины n сидит кузнечик. Каждая клетка является либо занятой, либо свободной. Кузнечик умеет прыгать на 11, 22, \ldots… kk клеток вперед. Найдите количество различных путей, которыми он может добраться до последней клетки, не заходя в занятые.
Входные данные
В первой строке записано два целых числа n, k (1<=k<=n<=5*10^5).
Во второй строке записана строка длины n, состоящая только из нулей и единиц. Ноль обозначает свободную клетку, а единица - занятую.
Выходные данные
Выведите единственное число - количество способов добраться до последней клетки. Поскольку это число может быть очень большим, выведите его по модулю 10^9 + 7.
Sample Input 1:
8 3
01100010
Sample Output 1:
3
Sample Input 2:
8 3
00000001
Sample Output 2:
0
Sample Input 3:
8 4
00111000
Sample Output 3:
4
'''
